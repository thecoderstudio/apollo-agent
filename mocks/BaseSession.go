// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	broadcast "github.com/dustin/go-broadcast"
	mock "github.com/stretchr/testify/mock"

	os "os"
)

// BaseSession is an autogenerated mock type for the BaseSession type
type BaseSession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BaseSession) Close() {
	_m.Called()
}

// Execute provides a mock function with given fields: _a0
func (_m *BaseSession) Execute(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Out provides a mock function with given fields:
func (_m *BaseSession) Out() *broadcast.Broadcaster {
	ret := _m.Called()

	var r0 *broadcast.Broadcaster
	if rf, ok := ret.Get(0).(func() *broadcast.Broadcaster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broadcast.Broadcaster)
		}
	}

	return r0
}

// Session provides a mock function with given fields:
func (_m *BaseSession) Session() *os.File {
	ret := _m.Called()

	var r0 *os.File
	if rf, ok := ret.Get(0).(func() *os.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	return r0
}

// SessionID provides a mock function with given fields:
func (_m *BaseSession) SessionID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
