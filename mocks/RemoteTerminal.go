// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	oauth "github.com/thecoderstudio/apollo-agent/oauth"

	url "net/url"

	websocket "github.com/thecoderstudio/apollo-agent/websocket"
)

// RemoteTerminal is an autogenerated mock type for the RemoteTerminal type
type RemoteTerminal struct {
	mock.Mock
}

// Commands provides a mock function with given fields:
func (_m *RemoteTerminal) Commands() <-chan websocket.Command {
	ret := _m.Called()

	var r0 <-chan websocket.Command
	if rf, ok := ret.Get(0).(func() <-chan websocket.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan websocket.Command)
		}
	}

	return r0
}

// Errs provides a mock function with given fields:
func (_m *RemoteTerminal) Errs() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// Interrupt provides a mock function with given fields:
func (_m *RemoteTerminal) Interrupt() chan struct{} {
	ret := _m.Called()

	var r0 chan struct{}
	if rf, ok := ret.Get(0).(func() chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}

	return r0
}

// Listen provides a mock function with given fields: _a0, _a1, _a2
func (_m *RemoteTerminal) Listen(_a0 url.URL, _a1 oauth.AccessToken, _a2 <-chan websocket.ShellIO) <-chan struct{} {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func(url.URL, oauth.AccessToken, <-chan websocket.ShellIO) <-chan struct{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Out provides a mock function with given fields:
func (_m *RemoteTerminal) Out() <-chan websocket.ShellIO {
	ret := _m.Called()

	var r0 <-chan websocket.ShellIO
	if rf, ok := ret.Get(0).(func() <-chan websocket.ShellIO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan websocket.ShellIO)
		}
	}

	return r0
}
